global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # Default ciphers to use on SSL-enabled listening sockets.
        # For more information, see ciphers(1SSL). This list is from:
        #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
        # An alternative list with additional directives can be obtained from
        #  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
        ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
        ssl-default-bind-options no-sslv3

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

frontend prod-api
    bind *:8443
    mode tcp
    default_backend prod-api-back
backend prod-api-back
    option  httpchk GET /readyz HTTP/1.0
    option  log-health-checks
    http-check expect status 200
    mode tcp
    default-server verify none check-ssl inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 5000 maxqueue 5000 weight 100
    server master 192.168.101.20:6443 check

frontend stage-api
    bind *:7443
    mode tcp
    default_backend stage-api-back
backend stage-api-back
    option  httpchk GET /readyz HTTP/1.0
    option  log-health-checks
    http-check expect status 200
    mode tcp
    default-server verify none check-ssl inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 5000 maxqueue 5000 weight 100
    server master 192.168.101.20:6443 check

frontend srv-http
    bind *:80
    mode http
    acl ACL_HOST hdr(host) -i  grafana.sarajkins.space
##    acl ACL_HOST hdr(host) -i  monprod.adminia.ru
    use_backend prod-http-back if ACL_HOST
    default_backend stage-http-back

backend prod-http-back
    mode http
    server master 192.168.101.20:30080
    server worker01 192.168.102.28:30080
    server worker02 192.168.103.20:30080
    server gitlab 192.168.102.31:30080
    server runner 192.168.102.9:30080

backend stage-http-back
    mode http
    server master 192.168.101.20:30080
    server worker01 192.168.102.28:30080
    server worker02 192.168.103.20:30080
    server gitlab 192.168.102.31:30080
    server runner 192.168.102.9:30080

frontend srv-https
    bind *:443
    mode http
    acl ACL_HOST hdr(host) -i  grafana.sarajkins.space
##    acl ACL_HOST hdr(host) -i  monprod.adminia.ru
    use_backend prod-https-back if ACL_HOST
    default_backend stage-https-back

backend prod-https-back
    mode http
    server master 192.168.101.20:30080
    server worker01 192.168.102.28:30080
    server worker02 192.168.103.20:30080
    server gitlab 192.168.102.31:30080
    server runner 192.168.102.9:30080

backend stage-https-back
    mode http
    server master 192.168.101.20:30080
    server worker01 192.168.102.28:30080
    server worker02 192.168.103.20:30080
    server gitlab 192.168.102.31:30080
    server runner 192.168.102.9:30080